{"version":3,"file":"static/js/863.d4f96ed4.chunk.js","mappings":"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","sources":["webpack://pirovski.shop.project/./src/components/dashboard/DashboardComponent.module.css?fb13","hooks/useAuthRedirect.ts","webpack://pirovski.shop.project/./src/components/dashboard/createForm/CreateFormComponent.module.css?2205","webpack://pirovski.shop.project/./src/components/dashboard/createForm/createSkiComponent/CreateSkiComponent.module.css?ae5f","webpack://pirovski.shop.project/./src/components/dashboard/skiTracks/SkiTrackComponent.module.css?bc10","webpack://pirovski.shop.project/./src/components/dashboard/createForm/createSkiComponent/createTrackComponent/manageWeightsComponent/ManageWeightsComponent.module.css?f7b3","webpack://pirovski.shop.project/./src/components/dashboard/createForm/createSkiComponent/createTrackComponent/manageWeightsComponent/changeWeightComponent/ChangeWeightComponent.module.css?585e","components/dashboard/createForm/createSkiComponent/createTrackComponent/manageWeightsComponent/changeWeightComponent/ChangeWeightComponent.tsx","components/dashboard/createForm/createSkiComponent/createTrackComponent/manageWeightsComponent/ManageWeightsComponent.tsx","components/dashboard/createForm/createSkiComponent/createTrackComponent/SkiLengthComponent.tsx","commonFunctions/convertToBase64.ts","webpack://pirovski.shop.project/./src/components/commonComponents/imagePreviewWithFullscreen/ImagePreviewWithFullscreen.module.css?a64a","components/commonComponents/imagePreviewWithFullscreen/ImagePreviewWithFullscreen.tsx","components/dashboard/skiTracks/SkiTrackComponent.tsx","commonFunctions/validationFunctions/skiValidationFunctions.ts","components/dashboard/createForm/createSkiComponent/CreateSkiComponent.tsx","webpack://pirovski.shop.project/./src/components/dashboard/createForm/createSkipoleComponent/lengthComponent/SkiPoleLengthComponent.module.css?46f6","components/dashboard/createForm/createSkipoleComponent/lengthComponent/SkiPoleLengthComponent.tsx","commonFunctions/validationFunctions/skiPoleValidationFunctions.ts","components/dashboard/createForm/createSkipoleComponent/CreateSkiPoleComponent.tsx","components/dashboard/createForm/CreateFormComponent.tsx","webpack://pirovski.shop.project/./src/components/dashboard/updateForm/UpdateFormComponent.module.css?055f","components/dashboard/updateForm/updateSkiComponent/UpdateSkiComponent.tsx","components/dashboard/updateForm/updateSkipoleComponent/UpdateSkiPoleComponent.tsx","components/dashboard/updateForm/UpdateFormComponent.tsx","components/dashboard/DashboardComponent.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"DashboardComponent_wrapper__174f-\",\"dashboardContainer\":\"DashboardComponent_dashboardContainer__doMz1\",\"controlElements\":\"DashboardComponent_controlElements__0AQ+O\",\"createNewButton\":\"DashboardComponent_createNewButton__FW-dj\",\"filtersAndTableContainer\":\"DashboardComponent_filtersAndTableContainer__s1RUy\",\"filtersElements\":\"DashboardComponent_filtersElements__DNErU\",\"subCategory\":\"DashboardComponent_subCategory__e8bCr\",\"dashboardTable\":\"DashboardComponent_dashboardTable__srYbb\",\"idInTableRow\":\"DashboardComponent_idInTableRow__15h0I\",\"updateUi\":\"DashboardComponent_updateUi__mW9To\",\"controlButton\":\"DashboardComponent_controlButton__Z8sg7\"};","import {useAppSelector} from \"./reduxHooks\";\r\nimport {selectIsAuth} from \"../redux/appStateSlice\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport const useAuthRedirect = () => {\r\n    const isAuth = useAppSelector(selectIsAuth)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect( () => {\r\n        if (!isAuth) {\r\n            navigate('/login')\r\n        }\r\n    }, [isAuth, navigate] )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"CreateFormComponent_wrapper__qcV8p\",\"createFormContainer\":\"CreateFormComponent_createFormContainer__dNVhQ\",\"createForm\":\"CreateFormComponent_createForm__IdMJB\",\"redButton\":\"CreateFormComponent_redButton__UzxaQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"createForm\":\"CreateSkiComponent_createForm__9ThCW\",\"createTrack\":\"CreateSkiComponent_createTrack__bymY+\",\"manageWeightsUi\":\"CreateSkiComponent_manageWeightsUi__-y12x\",\"redButton\":\"CreateSkiComponent_redButton__isxLo\"};","// extracted by mini-css-extract-plugin\nexport default {\"createTrack\":\"SkiTrackComponent_createTrack__fuRd4\",\"manageWeightsUi\":\"SkiTrackComponent_manageWeightsUi__BA5T1\"};","// extracted by mini-css-extract-plugin\nexport default {\"manageWeightsUi\":\"ManageWeightsComponent_manageWeightsUi__v1-p2\",\"changeWeightUi\":\"ManageWeightsComponent_changeWeightUi__P5Al-\",\"closeButton\":\"ManageWeightsComponent_closeButton__Ghht-\"};","// extracted by mini-css-extract-plugin\nexport default {\"manageWeightsUi\":\"ChangeWeightComponent_manageWeightsUi__76eaP\",\"changeWeightUi\":\"ChangeWeightComponent_changeWeightUi__eLh0p\",\"closeButton\":\"ChangeWeightComponent_closeButton__6kQ2G\"};","import React, {useState} from \"react\";\r\nimport styles from './ChangeWeightComponent.module.css'\r\nimport {useAppDispatch} from \"../../../../../../../hooks/reduxHooks\";\r\nimport {setNewSkiHardTrackWeight, setNewSkiUniTrackWeight} from \"../../../../../../../redux/skisSlice\";\r\n\r\ntype PropsType = {\r\n    trackIndex: number,\r\n    trackType: 'hard' | 'universal',\r\n    weightIndex: number,\r\n    weight: string,\r\n    reservation: boolean,\r\n    uiControlCallback: (arg: boolean) => void\r\n}\r\n\r\nconst ChangeWeightComponent: React.FC<PropsType> = ({trackIndex, trackType, weightIndex, weight, reservation, uiControlCallback}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [weightString, setWeightString] = useState(weight)\r\n    const [isReserved, setIsReserved] = useState(reservation)\r\n\r\n    function handleChangeWeightClick(index: number, weight: string, isReserved: boolean) {\r\n        const actionPayloadDTO = {track: trackIndex, index: index, weight: weight, isReserved: isReserved}\r\n        switch (trackType) {\r\n            case \"hard\":\r\n                dispatch(setNewSkiHardTrackWeight(actionPayloadDTO));\r\n                break;\r\n            case \"universal\":\r\n                dispatch(setNewSkiUniTrackWeight(actionPayloadDTO));\r\n                break;\r\n        }\r\n        setWeightString('')\r\n        setIsReserved(false)\r\n        uiControlCallback(false)\r\n    }\r\n\r\n\r\n    return <div className={styles.changeWeightUi}>\r\n        <button className={styles.closeButton} onClick={() => handleChangeWeightClick(weightIndex, weightString, isReserved)}>X</button>\r\n        <span>\r\n            <h3>Изменить вес</h3>\r\n        </span>\r\n        <div>\r\n            <p>\r\n                Вес\r\n                <input onChange={(e) => setWeightString(e.target.value)} value={weightString}/>\r\n            </p>\r\n        </div>\r\n        <div>\r\n            <p>\r\n                Бронь\r\n                <input type={\"checkbox\"} onChange={() => setIsReserved(!isReserved)} defaultChecked={isReserved}/>\r\n            </p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChangeWeightComponent","import React, {useState} from \"react\";\r\nimport styles from './ManageWeightsComponent.module.css'\r\nimport {skiLengthType, skiWeightType} from \"../../../../../../utils/types\";\r\nimport {useAppDispatch, useAppSelector} from \"../../../../../../hooks/reduxHooks\";\r\nimport {\r\n    addNewSkiHardTrackWeight,\r\n    addNewSkiUniTrackWeight,\r\n    deleteNewSkiHardTrackWeight,\r\n    deleteNewSkiUniTrackWeight,\r\n    selectNewSkiData\r\n} from \"../../../../../../redux/skisSlice\";\r\nimport ChangeWeightComponent from \"./changeWeightComponent/ChangeWeightComponent\";\r\n\r\ntype PropsType = {\r\n    track: skiLengthType,\r\n    trackIndex: number,\r\n    trackType: 'hard' | 'universal',\r\n    uiControlCallBack:  React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst ManageWeightsComponent: React.FC<PropsType> = ({track, trackIndex, trackType, uiControlCallBack}) => {\r\n    const skiName = useAppSelector(selectNewSkiData).name\r\n    const dispatch = useAppDispatch()\r\n\r\n    function createWeight(trackType: string) {\r\n        switch (trackType) {\r\n            case 'hard':\r\n                return <h3>{skiName} Жесткая Трасса</h3>\r\n            case 'universal':\r\n                return <h3>{skiName} Универсальные</h3>\r\n        }\r\n    }\r\n\r\n    function handleCreateWeightClick() {\r\n        switch (trackType) {\r\n            case \"hard\":\r\n                dispatch(addNewSkiHardTrackWeight(track.lengthString));\r\n                break;\r\n            case \"universal\":\r\n                dispatch(addNewSkiUniTrackWeight(track.lengthString));\r\n                break;\r\n        }\r\n    }\r\n\r\n    function handleDeleteWeightClick(index: number) {\r\n        const actionPayloadDTO = {track: trackIndex, index: index}\r\n        switch (trackType) {\r\n            case \"hard\":\r\n                dispatch(deleteNewSkiHardTrackWeight(actionPayloadDTO));\r\n                break;\r\n            case \"universal\":\r\n                dispatch(deleteNewSkiUniTrackWeight(actionPayloadDTO));\r\n                break;\r\n        }\r\n    }\r\n\r\n    function reservationChecker(isReserved: boolean) {\r\n        if (!isReserved) {\r\n            return '!R'\r\n        }\r\n        return 'R'\r\n    }\r\n\r\n    const WeightComponent:React.FC<{weight: skiWeightType, index: number}> = ({weight, index}) => {\r\n        const [isChangeWeightStringUiOpen, setIsChangeWeightStringUiOpen] = useState(false)\r\n\r\n        return <div>\r\n            <button onClick={() => setIsChangeWeightStringUiOpen(!isChangeWeightStringUiOpen)}>\r\n                {weight.weightString + reservationChecker(weight.isReserved)}\r\n            </button>\r\n            {isChangeWeightStringUiOpen &&\r\n                <ChangeWeightComponent\r\n                    trackIndex={trackIndex}\r\n                    trackType={trackType}\r\n                    weightIndex={index}\r\n                    weight={weight.weightString}\r\n                    reservation={weight.isReserved}\r\n                    uiControlCallback={setIsChangeWeightStringUiOpen}\r\n                />\r\n            }\r\n            <button onClick={() => handleDeleteWeightClick(index)}>X</button>\r\n        </div>\r\n    }\r\n\r\n    return <div className={styles.manageWeightsUi}>\r\n        <button className={styles.closeButton} onClick={() => uiControlCallBack(false)}>X</button>\r\n        {createWeight(trackType)}\r\n        <h2>\r\n            {track.lengthString}\r\n            <button onClick={() => handleCreateWeightClick()}>+</button>\r\n        </h2>\r\n        <div>\r\n            {track.weights.map((w, index) =>\r\n                <WeightComponent key={index} weight={w} index={index}/>\r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ManageWeightsComponent","import React, {useState} from \"react\";\r\nimport {skiLengthType} from \"../../../../../utils/types\";\r\nimport ManageWeightsComponent from \"./manageWeightsComponent/ManageWeightsComponent\";\r\n\r\ntype PropsType = {\r\n    track: skiLengthType,\r\n    trackIndex: number,\r\n    trackType: 'hard' | 'universal',\r\n    filterOutLength: (index: number) => void\r\n}\r\n\r\nconst SkiLengthComponent: React.FC<PropsType> = ({track, trackType, trackIndex, filterOutLength}) => {\r\n    const [isCreateWeightUiOpen, setIsCreateWeightUiOpen] = useState(false)\r\n\r\n    return <div>\r\n        <div>\r\n            <button onClick={() => setIsCreateWeightUiOpen(!isCreateWeightUiOpen)}>\r\n                {track.lengthString}\r\n            </button>\r\n            <button onClick={() => filterOutLength(trackIndex)}>\r\n                X\r\n            </button>\r\n        </div>\r\n        {isCreateWeightUiOpen && <ManageWeightsComponent track={track} trackIndex={trackIndex} trackType={trackType} uiControlCallBack={setIsCreateWeightUiOpen}/>}\r\n    </div>\r\n}\r\n\r\nexport default SkiLengthComponent","import React, {Dispatch} from \"react\";\r\nimport {setNewSkiImg} from \"../redux/skisSlice\";\r\nimport {UnknownAction} from \"@reduxjs/toolkit\";\r\nimport {setNewSkiPoleImg} from \"../redux/skiPolesSlice\";\r\n\r\nexport function convertToBase64(event: React.ChangeEvent<HTMLInputElement>, callBackType: \"ski\" | \"skiPole\", dispatch: Dispatch<UnknownAction>) {\r\n    if (event.target.files) {\r\n        const file = event.target.files[0];\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n\r\n        if (callBackType === \"ski\") {\r\n            reader.onload = () => {\r\n                dispatch(setNewSkiImg(reader.result))\r\n            };\r\n        } else {\r\n            reader.onload = () => {\r\n                dispatch(setNewSkiPoleImg(reader.result))\r\n            };\r\n        }\r\n        reader.onerror = (error) => {\r\n            console.log('Error: ', error);\r\n        };\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"skiImg\":\"ImagePreviewWithFullscreen_skiImg__H5FDv\",\"skiImgFullscreen\":\"ImagePreviewWithFullscreen_skiImgFullscreen__OLtzt\",\"openImgFullscreenOnHover\":\"ImagePreviewWithFullscreen_openImgFullscreenOnHover__pMMZ6\"};","import styles from \"./ImagePreviewWithFullscreen.module.css\"\r\nimport React, {useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    src: string,\r\n    id: string\r\n}\r\n\r\nconst ImagePreviewWithFullscreen: React.FC<PropsType> = ({src, id}) => {\r\n    const [isOpenFullscreenUiHidden, setOpenFullscreenUiHidden] = useState(true)\r\n    const [isSkiImgFullscreenHidden, setIsSkiImgFullscreenHidden] = useState(true)\r\n\r\n    return <div>\r\n        <div className={styles.imgAndHoverElemContainer}>\r\n            <img className={styles.skiImg} src={src} alt={id}\r\n                 onMouseEnter={() => {\r\n                     if (src) setOpenFullscreenUiHidden(false)\r\n                 }}\r\n                 onMouseLeave={() => {\r\n                     if (src) setOpenFullscreenUiHidden(true)\r\n                 }}\r\n                 onClick={() => {\r\n                     if (src) setIsSkiImgFullscreenHidden(false)\r\n                 }}\r\n            />\r\n            <h1 hidden={isOpenFullscreenUiHidden} className={styles.openImgFullscreenOnHover}>🔎</h1>\r\n        </div>\r\n        <div className={styles.skiImgFullscreen} hidden={isSkiImgFullscreenHidden}>\r\n            <button onClick={() => setIsSkiImgFullscreenHidden(true)}>x</button>\r\n            <img src={src} alt={id}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ImagePreviewWithFullscreen","import styles from \"./SkiTrackComponent.module.css\";\r\nimport SkiLengthComponent from \"../createForm/createSkiComponent/createTrackComponent/SkiLengthComponent\";\r\nimport React, {useState} from \"react\";\r\nimport {useAppDispatch} from \"../../../hooks/reduxHooks\";\r\nimport {skiModel} from \"../../../utils/types\";\r\nimport {\r\n    addNewSkiHardTrack,\r\n    addNewSkiUniTrack,\r\n    setNewSkiHardTrack,\r\n    setNewSkiId,\r\n    setNewSkiName,\r\n    setNewSkiType,\r\n    setNewSkiUniTrack\r\n} from \"../../../redux/skisSlice\";\r\nimport {skiTypeEnum} from \"../../../utils/skiTypeEnum\";\r\nimport {convertToBase64} from \"../../../commonFunctions/convertToBase64\";\r\nimport ImagePreviewWithFullscreen from \"../../commonComponents/imagePreviewWithFullscreen/ImagePreviewWithFullscreen\";\r\n\r\ntype PropsType = {\r\n    ski: skiModel,\r\n    isInitialized: boolean\r\n}\r\n\r\nconst SkiTrackComponent: React.FC<PropsType> = ({ski, isInitialized}) => {\r\n    const [newTrackLength, setNewTrackLength] = useState('')\r\n    const [isCreateHardTrackLengthUiOpen, setIsCreateHardTrackLengthUiOpen] = useState(false)\r\n    const [isCreateUniversalTrackLengthUiOpen, setIsCreateUniversalTrackLengthUiOpen] = useState(false)\r\n    const dispatch = useAppDispatch()\r\n\r\n    function handleCreateHardTrack(length: string) {\r\n        dispatch(addNewSkiHardTrack(length))\r\n        setNewTrackLength('')\r\n        setIsCreateHardTrackLengthUiOpen(false)\r\n    }\r\n\r\n    function handleCreateUniversalTrack(length: string) {\r\n        dispatch(addNewSkiUniTrack(length))\r\n        setNewTrackLength('')\r\n        setIsCreateUniversalTrackLengthUiOpen(false)\r\n    }\r\n\r\n    function filterOutHardTrack(index: number) {\r\n        dispatch(setNewSkiHardTrack(ski.hardTrack.filter((_, indexInArray) => indexInArray !== index)))\r\n    }\r\n\r\n    function filterOutUniversalTrack(index: number) {\r\n        dispatch(setNewSkiUniTrack(ski.universalTrack.filter((_, indexInArray) => indexInArray !== index)))\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            <p>ID</p>\r\n            <input value={ski.id}\r\n                   disabled={isInitialized}\r\n                   type={\"text\"}\r\n                   onChange={(e) => dispatch(setNewSkiId(e.target.value))}\r\n                   required={true}\r\n            />\r\n        </div>\r\n        <div>Тип:\r\n            <select value={ski.type} onChange={(e) => dispatch(setNewSkiType(e.target.value as skiTypeEnum))}>\r\n                <option value={skiTypeEnum.CLASSIC}>Классика</option>\r\n                <option value={skiTypeEnum.SKATING}>Коньки</option>\r\n            </select>\r\n        </div>\r\n        <div>\r\n            <p>Название модели</p>\r\n            <input value={ski.name}\r\n                   type={\"text\"}\r\n                   onChange={(e) => dispatch(setNewSkiName(e.target.value))}\r\n                   required={true}/>\r\n        </div>\r\n        <div>\r\n            <p>Картинка</p>\r\n            <ImagePreviewWithFullscreen src={ski.skiImg} id={ski.id}/>\r\n            <input type={\"file\"}\r\n                   onChange={e => convertToBase64(e, \"ski\", dispatch)}\r\n                   required={true}\r\n                   accept={'image/*'}\r\n            />\r\n        </div>\r\n        <div>\r\n            <p>\r\n                Жесткая трасса\r\n                <button onClick={() => setIsCreateHardTrackLengthUiOpen(!isCreateHardTrackLengthUiOpen)}>+</button>\r\n            </p>\r\n            {isCreateHardTrackLengthUiOpen && <div className={styles.createTrack}>\r\n                <button className={styles.closeButton} onClick={() => setIsCreateHardTrackLengthUiOpen(false)}>X\r\n                </button>\r\n                <div>\r\n                    <p>Добавить длину для жесткой трассы</p>\r\n                </div>\r\n                <div>\r\n                    <input type={\"text\"} onChange={(e) => setNewTrackLength(e.target.value)}/>\r\n                </div>\r\n                <button onClick={() => handleCreateHardTrack(newTrackLength)}>\r\n                    Добавить длину\r\n                </button>\r\n            </div>}\r\n            <div>\r\n                {ski.hardTrack?.map((h, index) =>\r\n                    <SkiLengthComponent\r\n                        key={h.lengthString + index}\r\n                        track={h}\r\n                        trackIndex={index}\r\n                        trackType={'hard'}\r\n                        filterOutLength={filterOutHardTrack}\r\n                    />)}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <label>\r\n                Универсальные\r\n                <button onClick={() => setIsCreateUniversalTrackLengthUiOpen(!isCreateUniversalTrackLengthUiOpen)}>\r\n                    +\r\n                </button>\r\n            </label>\r\n            {isCreateUniversalTrackLengthUiOpen && <div className={styles.createTrack}>\r\n                <button className={styles.closeButton} onClick={() => setIsCreateUniversalTrackLengthUiOpen(false)}>X\r\n                </button>\r\n                <div>\r\n                    <p>Добавить длину для универсальных лыж</p>\r\n                </div>\r\n                <div>\r\n                    <input type={\"text\"} onChange={(e) => setNewTrackLength(e.target.value)}/>\r\n                </div>\r\n                <button onClick={() => handleCreateUniversalTrack(newTrackLength)}>\r\n                    Добавить длину\r\n                </button>\r\n            </div>}\r\n            <div>\r\n                {ski.universalTrack?.map((u, index) =>\r\n                    <SkiLengthComponent\r\n                        key={u.lengthString + index}\r\n                        track={u}\r\n                        trackIndex={index}\r\n                        trackType={'universal'}\r\n                        filterOutLength={filterOutUniversalTrack}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SkiTrackComponent","import {skiLengthType, skiModel} from \"../../utils/types\";\r\n\r\n/**\r\n * @param track an array of ski lengths to validate\r\n */\r\nexport function validateTrack(track: skiLengthType[]){\r\n    for(let i = 0; i < track.length; i++){\r\n        for(let j = i+1; j < track.length; j++){\r\n            if(track[i].lengthString === track[j].lengthString){\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n/**\r\n * @param ski a ski to validate\r\n * @param allSkiData optional array of all skis param to validate NEW ski against (skip if validating existing ski)\r\n */\r\nexport function validateSki(ski: skiModel, allSkiData?: skiModel[]) {\r\n    let error = ''\r\n    if (!ski.id || ski.id === '') {\r\n        error = \"ID is required\"\r\n        return error\r\n    } else if (allSkiData && allSkiData.filter((value) => value.id === ski.id).length > 0) {\r\n        error = \"ID must be unique\"\r\n        return error\r\n    } else if (!ski.name || ski.name === '') {\r\n        error = \"Ski name is required\"\r\n        return error\r\n    } else if(!ski.skiImg || ski.skiImg === ''){\r\n        error = \"Ski must have an image\"\r\n        return error\r\n    }\r\n    else if (ski.hardTrack.length <= 0 && ski.universalTrack.length <= 0) {\r\n        error = \"You can't create new ski without tracks\"\r\n        return error\r\n    }else if(validateTrack(ski.hardTrack)){\r\n        error = 'All hard tracks must have unique names'\r\n        return error\r\n    }else if(validateTrack(ski.universalTrack)) {\r\n        error = 'All universal tracks must have unique names'\r\n        return error\r\n    }else if (ski.hardTrack.map((track, index) => {\r\n        if (track.weights.length <= 0) {\r\n            error = `Hard track number ${index + 1} doesn't have weights`\r\n        }\r\n        return null\r\n    })) {\r\n        return error\r\n    }\r\n    return error\r\n}","import React, {useEffect} from \"react\";\r\nimport styles from './CreateSkiComponent.module.css'\r\nimport {useAppDispatch, useAppSelector} from \"../../../../hooks/reduxHooks\";\r\nimport {createSki, selectNewSkiData, selectSkis, setNewSkiData} from \"../../../../redux/skisSlice\";\r\nimport {skiTypeEnum} from \"../../../../utils/skiTypeEnum\";\r\nimport SkiTrackComponent from \"../../skiTracks/SkiTrackComponent\";\r\nimport {validateSki} from \"../../../../commonFunctions/validationFunctions/skiValidationFunctions\";\r\nimport {setCreateUiOpen} from \"../../../../redux/appStateSlice\";\r\n\r\n\r\nconst CreateSkiComponent = () => {\r\n    const ski = useAppSelector(selectNewSkiData)\r\n    const allSkiData = useAppSelector(selectSkis)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setNewSkiData({\r\n            id: 'new_ski_id',\r\n            name: \"New Ski Name\",\r\n            type: skiTypeEnum.CLASSIC,\r\n            skiImg: '',\r\n            hardTrack: [],\r\n            universalTrack: []\r\n        }))\r\n    }, [dispatch]);\r\n\r\n    function handleCreateClick() {\r\n        const validationError = validateSki(ski, allSkiData)\r\n        if (validationError !== '') {\r\n            alert(validationError)\r\n        } else {\r\n            dispatch(createSki(ski))\r\n            dispatch(setCreateUiOpen())\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.createForm}>\r\n        <SkiTrackComponent ski={ski} isInitialized={false}/>\r\n        <button onClick={handleCreateClick} className={styles.redButton}>\r\n            Добавить\r\n        </button>\r\n    </div>)\r\n}\r\n\r\nexport default CreateSkiComponent","// extracted by mini-css-extract-plugin\nexport default {\"updateUi\":\"SkiPoleLengthComponent_updateUi__37lBs\"};","import React, {useState} from \"react\";\r\nimport styles from './SkiPoleLengthComponent.module.css'\r\nimport {useAppDispatch} from \"../../../../../hooks/reduxHooks\";\r\nimport {deleteNewSkiPoleLength, setNewSkiPoleLength} from \"../../../../../redux/skiPolesSlice\";\r\n\r\ntype PropsType = {\r\n    length: string,\r\n    isReserved: boolean,\r\n    index: number\r\n}\r\n\r\nconst SkiPoleLengthComponent: React.FC<PropsType> = ({length, isReserved, index}) => {\r\n    const dispatch = useAppDispatch()\r\n    const [localLength, setLocalLength] = useState(length)\r\n    const [reservation, setReservation] = useState(isReserved)\r\n\r\n    const [isUpdateLengthUiOpen, setIsUpdateLengthUiOpen] = useState(false)\r\n\r\n    function filterOutLength(index: number) {\r\n        dispatch(deleteNewSkiPoleLength(index))\r\n    }\r\n\r\n    function handleLengthUpdate(index: number, lengthString: string, reservation: boolean) {\r\n        const actionPayloadDTO = {index: index, length: lengthString, isReserved: reservation}\r\n        dispatch(setNewSkiPoleLength(actionPayloadDTO))\r\n    }\r\n\r\n    function reservationChecker(reservation: boolean) {\r\n        if (reservation) return 'R'\r\n        return 'R!'\r\n    }\r\n\r\n    function handleUpdateUiOpenerClick() {\r\n        setIsUpdateLengthUiOpen(!isUpdateLengthUiOpen)\r\n        if (isUpdateLengthUiOpen)\r\n            handleLengthUpdate(index, localLength, reservation)\r\n    }\r\n\r\n    return <div>\r\n        <label>\r\n            <button onClick={handleUpdateUiOpenerClick}>\r\n                {localLength + '|' + reservationChecker(reservation)}\r\n            </button>\r\n            {isUpdateLengthUiOpen && <div className={styles.updateUi}>\r\n                <label>\r\n                    Изменить длину\r\n                </label>\r\n                <div>\r\n                    <input\r\n                        value={localLength}\r\n                        onChange={(e) => setLocalLength(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type={\"checkbox\"}\r\n                        defaultChecked={reservation}\r\n                        onClick={() => setReservation(!reservation)}\r\n                    />\r\n                </div>\r\n            </div>}\r\n            <button onClick={() => filterOutLength(index)}>x</button>\r\n        </label>\r\n    </div>\r\n}\r\n\r\nexport default SkiPoleLengthComponent","import {skiPoleType} from \"../../utils/types\";\r\n\r\n\r\n/**\r\n *\r\n * @param skiPole - a ski pole to validate\r\n * @param allSkiPolesData - an optional ski poles array to use when validating existing ski pole\r\n */\r\nexport function validateSkiPole(skiPole: skiPoleType, allSkiPolesData?: skiPoleType[]) {\r\n    let error = ''\r\n    if (!skiPole.id || skiPole.id === '') {\r\n        error = \"ID is required\"\r\n        return error\r\n    } else if (allSkiPolesData && allSkiPolesData.filter((value) => value.id === skiPole.id).length > 0) {\r\n        error = \"ID must be unique\"\r\n        return error\r\n    } else if (!skiPole.name || skiPole.name === '') {\r\n        error = \"Ski pole name is required\"\r\n        return error\r\n    }  else if(!skiPole.poleImg || skiPole.poleImg === ''){\r\n        error = \"Ski must have an image\"\r\n        return error\r\n    }else if (skiPole.lengthArray.length <= 0) {\r\n        error = \"You can't create new ski without tracks\"\r\n        return error\r\n    }\r\n    return error\r\n}","import React, {useEffect} from \"react\";\r\nimport styles from '../createSkiComponent/CreateSkiComponent.module.css'\r\nimport {useAppDispatch, useAppSelector} from \"../../../../hooks/reduxHooks\";\r\nimport {\r\n    addNewSkiPoleLength,\r\n    createSkiPole,\r\n    selectNewSkiPoleData,\r\n    selectSkiPoles,\r\n    setNewSkiPoleData,\r\n    setNewSkiPoleId,\r\n    setNewSkiPoleName\r\n} from \"../../../../redux/skiPolesSlice\";\r\nimport SkiPoleLengthComponent from \"./lengthComponent/SkiPoleLengthComponent\";\r\nimport {validateSkiPole} from \"../../../../commonFunctions/validationFunctions/skiPoleValidationFunctions\";\r\nimport {convertToBase64} from \"../../../../commonFunctions/convertToBase64\";\r\nimport {setCreateUiOpen} from \"../../../../redux/appStateSlice\";\r\nimport ImagePreviewWithFullscreen\r\n    from \"../../../commonComponents/imagePreviewWithFullscreen/ImagePreviewWithFullscreen\";\r\n\r\n\r\nconst CreateSkiPoleComponent = () => {\r\n    const skiPole = useAppSelector(selectNewSkiPoleData)\r\n    const allSkiPolesData = useAppSelector(selectSkiPoles)\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setNewSkiPoleData({\r\n            id: 'new_ski_pole',\r\n            name: 'New Ski Pole',\r\n            poleImg: '',\r\n            lengthArray: []\r\n        }))\r\n    }, [dispatch]);\r\n\r\n    function handleCreateClick() {\r\n        const validationError = validateSkiPole(skiPole, allSkiPolesData)\r\n        if (validationError !== '') {\r\n            alert(validationError)\r\n        } else {\r\n            dispatch(createSkiPole(skiPole))\r\n            dispatch(setCreateUiOpen())\r\n        }\r\n    }\r\n\r\n    function handleCreateLengthClick() {\r\n        dispatch(addNewSkiPoleLength())\r\n    }\r\n\r\n    return (<div className={styles.createForm}>\r\n\r\n        <div>\r\n            <label>ID</label>\r\n            <input type={\"text\"} value={skiPole.id} onChange={(e) => dispatch(setNewSkiPoleId(e.target.value))}/>\r\n        </div>\r\n        <div>\r\n            <label>Название модели</label>\r\n            <input type={\"text\"} value={skiPole.name} onChange={(e) => dispatch(setNewSkiPoleName(e.target.value))}/>\r\n        </div>\r\n        <div>\r\n            <label>Картинка</label>\r\n            <ImagePreviewWithFullscreen src={skiPole.poleImg} id={skiPole.id}/>\r\n            <input type={\"file\"}\r\n                   onChange={e => convertToBase64(e,\"skiPole\", dispatch)}\r\n                   required={true}\r\n                   accept={'image/*'}\r\n            />\r\n        </div>\r\n        <div>\r\n            <label>\r\n                Длина для обрезки\r\n                <button onClick={handleCreateLengthClick}>+</button>\r\n            </label>\r\n            {skiPole.lengthArray.map((l, index) =>\r\n                <SkiPoleLengthComponent key={l.lengthString + index} length={l.lengthString} isReserved={l.isReserved}\r\n                                        index={index}/>\r\n            )}\r\n        </div>\r\n        <button onClick={handleCreateClick} className={styles.redButton}>\r\n            Добавить\r\n        </button>\r\n    </div>)\r\n}\r\n\r\nexport default CreateSkiPoleComponent","import React, {useState} from \"react\";\r\nimport styles from './CreateFormComponent.module.css'\r\nimport CreateSkiComponent from \"./createSkiComponent/CreateSkiComponent\";\r\nimport CreateSkiPoleComponent from \"./createSkipoleComponent/CreateSkiPoleComponent\";\r\nimport {useAppDispatch} from \"../../../hooks/reduxHooks\";\r\nimport {setCreateUiOpen} from \"../../../redux/appStateSlice\";\r\n\r\n\r\nconst CreateFormComponent = () => {\r\n    const [createType, setCreateType] = useState('ski')\r\n    const dispatch = useAppDispatch()\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.createFormContainer}>\r\n                <button className={styles.redButton} onClick={() => dispatch(setCreateUiOpen())}>x</button>\r\n                <h1>Добавить</h1>\r\n                <select onChange={(e) => setCreateType(e.target.value)}>\r\n                    <option value={'ski'}>Лыжи</option>\r\n                    <option value={'skipole'}>Палки</option>\r\n                </select>\r\n                {createType === 'ski' && <CreateSkiComponent/>}\r\n                {createType === 'skipole' && <CreateSkiPoleComponent/>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateFormComponent","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"UpdateFormComponent_wrapper__e7XP3\",\"createFormContainer\":\"UpdateFormComponent_createFormContainer__KqhHq\",\"createForm\":\"UpdateFormComponent_createForm__N9C+s\",\"closeButton\":\"UpdateFormComponent_closeButton__-5sDq\"};","import React, {useEffect} from \"react\";\r\nimport styles from '../../createForm/createSkiComponent/CreateSkiComponent.module.css'\r\nimport {useAppDispatch, useAppSelector} from \"../../../../hooks/reduxHooks\";\r\nimport {\r\n    selectNewSkiData,\r\n    selectSkis,\r\n    setNewSkiData,\r\n    setSkiDataByIndex,\r\n    updateOneSkiData\r\n} from \"../../../../redux/skisSlice\";\r\nimport SkiTrackComponent from \"../../skiTracks/SkiTrackComponent\";\r\nimport {validateSki} from \"../../../../commonFunctions/validationFunctions/skiValidationFunctions\";\r\nimport {setIsUpdateSkiUiOpen} from \"../../../../redux/appStateSlice\";\r\n\r\ntype PropsType = {\r\n    index: number\r\n}\r\n\r\nconst UpdateSkiComponent: React.FC<PropsType> = ({index}) => {\r\n    const initialData = useAppSelector(selectSkis)[index]\r\n    const ski = useAppSelector(selectNewSkiData)\r\n\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setNewSkiData(initialData))\r\n    }, [initialData, dispatch])\r\n\r\n\r\n    function handleUpdateClick() {\r\n        const validationError = validateSki(ski)\r\n        if(validationError !== ''){\r\n            alert(validationError)\r\n        } else {\r\n            const actionPayloadDTO = {\r\n                index: index,\r\n                data: ski\r\n            }\r\n            dispatch(setSkiDataByIndex(actionPayloadDTO))\r\n            dispatch(updateOneSkiData({id: ski.id, data: actionPayloadDTO.data}))\r\n            dispatch(setIsUpdateSkiUiOpen())\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (<div className={styles.createForm}>\r\n        <SkiTrackComponent ski={ski} isInitialized={true}/>\r\n        <button onClick={handleUpdateClick} className={styles.redButton}>\r\n            Изменить\r\n        </button>\r\n    </div>)\r\n}\r\n\r\nexport default UpdateSkiComponent","import React, {useEffect} from \"react\";\r\nimport styles from '../../createForm/createSkiComponent/CreateSkiComponent.module.css'\r\nimport {useAppDispatch, useAppSelector} from \"../../../../hooks/reduxHooks\";\r\nimport {\r\n    addNewSkiPoleLength,\r\n    selectNewSkiPoleData,\r\n    selectSkiPoles,\r\n    setNewSkiPoleData,\r\n    setNewSkiPoleName,\r\n    setSkiPoleDataByIndex,\r\n    updateOneSkiPoleData\r\n} from \"../../../../redux/skiPolesSlice\";\r\nimport SkiPoleLengthComponent from \"../../createForm/createSkipoleComponent/lengthComponent/SkiPoleLengthComponent\";\r\nimport {validateSkiPole} from \"../../../../commonFunctions/validationFunctions/skiPoleValidationFunctions\";\r\nimport {convertToBase64} from \"../../../../commonFunctions/convertToBase64\";\r\nimport {setIsUpdateSkiPoleUiOpen} from \"../../../../redux/appStateSlice\";\r\nimport ImagePreviewWithFullscreen\r\n    from \"../../../commonComponents/imagePreviewWithFullscreen/ImagePreviewWithFullscreen\";\r\n\r\ntype PropsType = {\r\n    index: number\r\n}\r\n\r\nconst UpdateSkiPoleComponent: React.FC<PropsType> = ({index}) => {\r\n    const initialData = useAppSelector(selectSkiPoles)[index]\r\n    const skiPole = useAppSelector(selectNewSkiPoleData)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setNewSkiPoleData(initialData))\r\n    }, [dispatch, initialData])\r\n\r\n    function handleUpdateClick() {\r\n        const validationError = validateSkiPole(skiPole)\r\n        if (validationError !== '') {\r\n            alert(validationError)\r\n        } else {\r\n            const actionPayloadDTO = {index: index, data: skiPole}\r\n            dispatch(setSkiPoleDataByIndex(actionPayloadDTO))\r\n            dispatch(updateOneSkiPoleData({\r\n                    id: skiPole.id,\r\n                    data: actionPayloadDTO.data\r\n                }\r\n            ))\r\n            dispatch(setIsUpdateSkiPoleUiOpen())\r\n        }\r\n    }\r\n\r\n    function handleCreateLengthClick() {\r\n        dispatch(addNewSkiPoleLength())\r\n    }\r\n\r\n    return (<div className={styles.createForm}>\r\n        <div>\r\n            <label>ID</label>\r\n            <input type={\"text\"} disabled={true} value={skiPole.id}/>\r\n        </div>\r\n        <div>\r\n            <label>Название модели</label>\r\n            <input value={skiPole.name} type={\"text\"} onChange={(e) => dispatch(setNewSkiPoleName(e.target.value))}/>\r\n        </div>\r\n        <div>\r\n            <label>Картинка</label>\r\n            <ImagePreviewWithFullscreen src={skiPole.poleImg} id={skiPole.id}/>\r\n            <input type={\"file\"}\r\n                   onChange={(e) => convertToBase64(e, \"skiPole\", dispatch)}\r\n                   required={true}\r\n                   accept={'image/*'}\r\n            />\r\n        </div>\r\n        <div>\r\n            <label>\r\n                Длина для обрезки\r\n                <button onClick={handleCreateLengthClick}>+</button>\r\n            </label>\r\n            {skiPole.lengthArray.map((l, index) =>\r\n                <SkiPoleLengthComponent key={l.lengthString + index} length={l.lengthString} isReserved={l.isReserved}\r\n                                        index={index}/>\r\n            )}\r\n        </div>\r\n        <button onClick={handleUpdateClick} className={styles.redButton}>\r\n            Изменить\r\n        </button>\r\n    </div>)\r\n}\r\n\r\nexport default UpdateSkiPoleComponent","import React from \"react\";\r\nimport styles from './UpdateFormComponent.module.css'\r\nimport UpdateSkiComponent from \"./updateSkiComponent/UpdateSkiComponent\";\r\nimport UpdateSkiPoleComponent from \"./updateSkipoleComponent/UpdateSkiPoleComponent\";\r\nimport {useAppDispatch} from \"../../../hooks/reduxHooks\";\r\nimport {closeUpdateUi} from \"../../../redux/appStateSlice\";\r\n\r\ntype PropsType = {\r\n    index: number,\r\n    updateType: \"ski\" | \"skiPole\"\r\n}\r\n\r\nconst UpdateFormComponent: React.FC<PropsType> = ({index, updateType}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    function switcher(updateData: typeof updateType) {\r\n        switch (updateData) {\r\n            case \"ski\":\r\n                return <UpdateSkiComponent index={index}/>\r\n            case \"skiPole\":\r\n                return <UpdateSkiPoleComponent index={index}/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.createFormContainer}>\r\n                <button className={styles.closeButton} onClick={() => {\r\n                    dispatch(closeUpdateUi())\r\n                }}>x\r\n                </button>\r\n                <h1>Изменить</h1>\r\n                {switcher(updateType)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateFormComponent","import React, {useEffect, useState} from \"react\";\r\nimport styles from './DashboardComponent.module.css'\r\nimport {\r\n    deleteSkiById,\r\n    getAllSkisData,\r\n    selectCurrentOpenedSkiIndex,\r\n    selectSkis,\r\n    selectSkiStatus, setCurrentOpenedSkiIndex,\r\n    setSkiStatus\r\n} from \"../../redux/skisSlice\";\r\nimport {AppDispatch} from \"../../redux/store\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport {\r\n    deleteSkiPoleById,\r\n    getAllSkiPolesData,\r\n    selectSkiPoles,\r\n    selectSkiPolesStatus,\r\n    setSkiPolesStatus\r\n} from \"../../redux/skiPolesSlice\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/reduxHooks\";\r\nimport {useAuthRedirect} from \"../../hooks/useAuthRedirect\";\r\nimport CreateFormComponent from \"./createForm/CreateFormComponent\";\r\nimport UpdateFormComponent from \"./updateForm/UpdateFormComponent\";\r\nimport {skiModel, skiPoleType} from \"../../utils/types\";\r\nimport {skiTypeEnum} from \"../../utils/skiTypeEnum\";\r\nimport {\r\n    selectAppStatus,\r\n    selectIsCreateUiOpen,\r\n    selectIsUpdateSkiPoleUiOpen,\r\n    selectIsUpdateSkiUiOpen, setCreateUiOpen, setIsUpdateSkiPoleUiOpen, setIsUpdateSkiUiOpen,\r\n    tryLogout\r\n} from \"../../redux/appStateSlice\";\r\n\r\nenum filters {\r\n    ALL = 'all',\r\n    SKIS = 'skis',\r\n    CLASSIC = 'classic',\r\n    SKATING = 'skating',\r\n    SKIPOLES = 'skiPoles'\r\n}\r\n\r\nconst DashboardComponent = () => {\r\n    const [filter, setFilter] = useState(filters.ALL)\r\n    const currentIndex = useAppSelector(selectCurrentOpenedSkiIndex)\r\n\r\n    const isCreateUiOpen = useAppSelector(selectIsCreateUiOpen)\r\n    const isUpdateSkiUiOpen = useAppSelector(selectIsUpdateSkiUiOpen)\r\n    const isUpdateSkiPoleUiOpen = useAppSelector(selectIsUpdateSkiPoleUiOpen)\r\n    const allSkisData = useAppSelector(selectSkis)\r\n    const allSkiPolesData = useAppSelector(selectSkiPoles)\r\n    const skiStatus = useAppSelector(selectSkiStatus)\r\n    const skiPoleStatus = useAppSelector(selectSkiPolesStatus)\r\n    const appStatus = useAppSelector(selectAppStatus)\r\n\r\n    const dispatch = useAppDispatch() as AppDispatch\r\n\r\n    const location = useLocation().pathname\r\n\r\n    useAuthRedirect()\r\n\r\n    useEffect(() => {\r\n        dispatch(setSkiStatus('idle'))\r\n        dispatch(setSkiPolesStatus('idle'))\r\n    }, [dispatch, location])\r\n\r\n    useEffect(() => {\r\n        if (skiStatus === 'idle' && skiPoleStatus === 'idle') {\r\n            dispatch(getAllSkisData())\r\n            dispatch(getAllSkiPolesData())\r\n        }\r\n    }, [location, skiStatus, skiPoleStatus, dispatch])\r\n\r\n    function filterSkis(skiType: skiTypeEnum) {\r\n        switch (filter) {\r\n            case filters.SKIPOLES:\r\n                return false\r\n            case filters.SKATING:\r\n                return skiType === skiTypeEnum.SKATING\r\n            case filters.CLASSIC:\r\n                return skiType === skiTypeEnum.CLASSIC\r\n            default:\r\n                return true\r\n        }\r\n    }\r\n\r\n    function filterSkiPoles() {\r\n        switch (filter) {\r\n            case filters.SKIPOLES:\r\n            case filters.ALL:\r\n                return true\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    function handleDeleteSkiClick(id: string) {\r\n        dispatch(deleteSkiById(id))\r\n    }\r\n\r\n    function handleDeleteSkiPoleClick(id: string) {\r\n        dispatch(deleteSkiPoleById(id))\r\n    }\r\n\r\n    function handleRefreshClick() {\r\n        dispatch(setSkiStatus('idle'))\r\n        dispatch(setSkiPolesStatus('idle'))\r\n    }\r\n\r\n    function handleLogoutClick() {\r\n        dispatch(tryLogout())\r\n    }\r\n\r\n    const TableRowSki: React.FC<{ ski: skiModel, index: number }> = ({ski, index}) => {\r\n\r\n        function skiTypeSwitcher(type: skiTypeEnum) {\r\n            return type === skiTypeEnum.CLASSIC ? <div>Классика</div> : <div>Коньковые</div>\r\n        }\r\n\r\n        return <tr\r\n            key={ski.id + '/' + ski.name}>\r\n            <td style={{fontWeight: \"bold\"}}>\r\n                <button onClick={() => {\r\n                    dispatch(setIsUpdateSkiUiOpen())\r\n                    dispatch(setCurrentOpenedSkiIndex(index))\r\n                }}>🖊\r\n                </button>\r\n                {isUpdateSkiUiOpen && (currentIndex === index) &&\r\n                    <UpdateFormComponent index={index} updateType={\"ski\"}/>}\r\n                {ski.id}\r\n            </td>\r\n            <td>{ski.name}</td>\r\n            <td>{skiTypeSwitcher(ski.type)}</td>\r\n            <td>\r\n                <img src={ski.skiImg} alt={ski.id} className={styles.skiImage}/>\r\n            </td>\r\n            <td>\r\n                {(ski.hardTrack.length > 0) && <div>\r\n                    Жесткая трасса:\r\n                    {ski.hardTrack.map(h => <button key={h.lengthString}>{h.lengthString}</button>)}\r\n                </div>\r\n                }\r\n                {(ski.universalTrack.length > 0) && <div>\r\n                    Универсальные:\r\n                    {\r\n                        ski.universalTrack.map(u => <button key={u.lengthString}>{u.lengthString}</button>)\r\n                    }\r\n                </div>\r\n                }\r\n            </td>\r\n            <td>\r\n                <button className={styles.deleteButton} onClick={() => handleDeleteSkiClick(ski.id)}>X</button>\r\n            </td>\r\n        </tr>\r\n    }\r\n\r\n    const TableRowSkiPole: React.FC<{ skiPole: skiPoleType, index: number }> = ({skiPole, index}) => {\r\n\r\n        return <tr key={skiPole.id + '/' + skiPole.name}>\r\n            <td style={{fontWeight: \"bold\"}}>\r\n                <button onClick={() => {\r\n                    dispatch(setIsUpdateSkiPoleUiOpen())\r\n                    dispatch(setCurrentOpenedSkiIndex(index))\r\n                }}>🖊\r\n                </button>\r\n                {isUpdateSkiPoleUiOpen && (currentIndex === index) &&\r\n                    <UpdateFormComponent index={index} updateType={\"skiPole\"}/>}\r\n                {skiPole.id}\r\n            </td>\r\n            <td>{skiPole.name}</td>\r\n            <td>Палки</td>\r\n            <td>\r\n                <img src={skiPole.poleImg} alt={skiPole.id} className={styles.skiImage}/>\r\n            </td>\r\n            <td>{skiPole.lengthArray.map((l, index) => <button\r\n                key={l.lengthString + index}>{l.lengthString}</button>)}</td>\r\n            <td>\r\n                <button className={styles.deleteButton}\r\n                        onClick={() => handleDeleteSkiPoleClick(skiPole.id)}>X\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.dashboardContainer}>\r\n                <div className={styles.controlElements}>\r\n                    <div></div>\r\n                    <button className={styles.createNewButton}\r\n                            onClick={() => dispatch(setCreateUiOpen())}\r\n                    >\r\n                        Добавить новое\r\n                    </button>\r\n                    <div>\r\n                        <button className={styles.controlButton}\r\n                                disabled={skiPoleStatus === 'loading' || skiStatus === 'loading'}\r\n                                onClick={handleRefreshClick}\r\n                        >\r\n                            Перезагрузить\r\n                        </button>\r\n                        <button className={styles.controlButton}\r\n                                disabled={appStatus === 'loading'}\r\n                                onClick={handleLogoutClick}\r\n                        >\r\n                            Выйти\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.filtersAndTableContainer}>\r\n                    <div className={styles.filtersElements}>\r\n                        <button onClick={() => setFilter(filters.ALL)}>Все товары</button>\r\n                        <button onClick={() => setFilter(filters.SKIS)}>Лыжи</button>\r\n                        <button className={styles.subCategory} onClick={() => setFilter(filters.CLASSIC)}>Классика\r\n                        </button>\r\n                        <button className={styles.subCategory} onClick={() => setFilter(filters.SKATING)}>Коньковые\r\n                        </button>\r\n                        <button onClick={() => setFilter(filters.SKIPOLES)}>Прочее</button>\r\n                        <button className={styles.subCategory} onClick={() => setFilter(filters.SKIPOLES)}>Палки\r\n                        </button>\r\n                    </div>\r\n                    <div className={styles.dashboardTable}>\r\n                        <table>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Название</th>\r\n                                <th>Тип</th>\r\n                                <th>Картинка</th>\r\n                                <th>Длина</th>\r\n                                <th>Удалить</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {allSkisData.map((s, index) => (\r\n                                    filterSkis(s.type) &&\r\n                                    <TableRowSki key={s.id} ski={s} index={index}/>\r\n                                )\r\n                            )}\r\n                            {allSkiPolesData.map((sp, index) => (\r\n                                    filterSkiPoles() &&\r\n                                    <TableRowSkiPole key={sp.id} skiPole={sp} index={index}/>\r\n                                )\r\n                            )}\r\n                            </tbody>\r\n                        </table>\r\n                        {isCreateUiOpen && <CreateFormComponent/>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashboardComponent"],"names":["_ref","trackIndex","trackType","weightIndex","weight","reservation","uiControlCallback","dispatch","useAppDispatch","weightString","setWeightString","useState","isReserved","setIsReserved","_jsxs","className","styles","children","_jsx","onClick","index","actionPayloadDTO","track","setNewSkiHardTrackWeight","setNewSkiUniTrackWeight","handleChangeWeightClick","onChange","e","target","value","type","defaultChecked","uiControlCallBack","skiName","useAppSelector","selectNewSkiData","name","WeightComponent","_ref2","isChangeWeightStringUiOpen","setIsChangeWeightStringUiOpen","ChangeWeightComponent","deleteNewSkiHardTrackWeight","deleteNewSkiUniTrackWeight","handleDeleteWeightClick","createWeight","lengthString","addNewSkiHardTrackWeight","addNewSkiUniTrackWeight","handleCreateWeightClick","weights","map","w","filterOutLength","isCreateWeightUiOpen","setIsCreateWeightUiOpen","ManageWeightsComponent","convertToBase64","event","callBackType","files","file","reader","FileReader","readAsDataURL","onload","setNewSkiImg","result","setNewSkiPoleImg","onerror","error","console","log","src","id","isOpenFullscreenUiHidden","setOpenFullscreenUiHidden","isSkiImgFullscreenHidden","setIsSkiImgFullscreenHidden","imgAndHoverElemContainer","skiImg","alt","onMouseEnter","onMouseLeave","hidden","openImgFullscreenOnHover","skiImgFullscreen","_ski$hardTrack","_ski$universalTrack","ski","isInitialized","newTrackLength","setNewTrackLength","isCreateHardTrackLengthUiOpen","setIsCreateHardTrackLengthUiOpen","isCreateUniversalTrackLengthUiOpen","setIsCreateUniversalTrackLengthUiOpen","filterOutHardTrack","setNewSkiHardTrack","hardTrack","filter","_","indexInArray","filterOutUniversalTrack","setNewSkiUniTrack","universalTrack","disabled","setNewSkiId","required","setNewSkiType","skiTypeEnum","CLASSIC","SKATING","setNewSkiName","ImagePreviewWithFullscreen","accept","createTrack","closeButton","handleCreateHardTrack","length","addNewSkiHardTrack","h","SkiLengthComponent","handleCreateUniversalTrack","addNewSkiUniTrack","u","validateTrack","i","j","validateSki","allSkiData","concat","CreateSkiComponent","selectSkis","useEffect","setNewSkiData","SkiTrackComponent","validationError","alert","createSki","setCreateUiOpen","localLength","setLocalLength","setReservation","isUpdateLengthUiOpen","setIsUpdateLengthUiOpen","setNewSkiPoleLength","handleLengthUpdate","reservationChecker","deleteNewSkiPoleLength","validateSkiPole","skiPole","allSkiPolesData","poleImg","lengthArray","CreateSkiPoleComponent","selectNewSkiPoleData","selectSkiPoles","setNewSkiPoleData","setNewSkiPoleId","setNewSkiPoleName","addNewSkiPoleLength","l","SkiPoleLengthComponent","createSkiPole","CreateFormComponent","createType","setCreateType","initialData","data","setSkiDataByIndex","updateOneSkiData","setIsUpdateSkiUiOpen","setSkiPoleDataByIndex","updateOneSkiPoleData","setIsUpdateSkiPoleUiOpen","updateType","closeUpdateUi","updateData","UpdateSkiComponent","UpdateSkiPoleComponent","switcher","filters","DashboardComponent","setFilter","ALL","currentIndex","selectCurrentOpenedSkiIndex","isCreateUiOpen","selectIsCreateUiOpen","isUpdateSkiUiOpen","selectIsUpdateSkiUiOpen","isUpdateSkiPoleUiOpen","selectIsUpdateSkiPoleUiOpen","allSkisData","skiStatus","selectSkiStatus","skiPoleStatus","selectSkiPolesStatus","appStatus","selectAppStatus","location","useLocation","pathname","useAuthRedirect","isAuth","selectIsAuth","navigate","useNavigate","setSkiStatus","setSkiPolesStatus","getAllSkisData","getAllSkiPolesData","TableRowSki","style","fontWeight","setCurrentOpenedSkiIndex","UpdateFormComponent","skiImage","deleteButton","handleDeleteSkiClick","deleteSkiById","TableRowSkiPole","handleDeleteSkiPoleClick","deleteSkiPoleById","wrapper","dashboardContainer","controlElements","createNewButton","controlButton","tryLogout","filtersAndTableContainer","filtersElements","SKIS","subCategory","SKIPOLES","dashboardTable","s","skiType","filterSkis","sp","filterSkiPoles"],"sourceRoot":""}